
import java.util.*;

class Answer
{

static int minCost(String arr[], int cost[], int N)
{
	// dp[i][j] represents the minimum cost to
	// make first i strings sorted.
	// j = 1 means i'th string is reversed.
	// j = 0 means i'th string is not reversed.
	int [][]dp = new int[N][2];

	// initializing dp array for first string
	dp[0][0] = 0;
	dp[0][1] = cost[0];

	// getting array of reversed strings
	String []revStr = new String[N];
	for (int i = 0; i < N; i++)
	{
		revStr[i] = arr[i];
		revStr[i] = reverse(revStr[i], 0, 
							revStr[i].length() - 1);
	}

	String curStr = "";
	int curCost;

	// looping for all strings
	for (int i = 1; i < N; i++)
	{
		// Looping twice, once for string and once
		// for reversed string
		for (int j = 0; j < 2; j++)
		{
			dp[i][j] = Integer.MAX_VALUE;

			// getting current string and current
			// cost according to j
			curStr = (j == 0) ? arr[i] : revStr[i];
			curCost = (j == 0) ? 0 : cost[i];

			// Update dp value only if current string
			// is lexicographically larger
			if (curStr.compareTo(arr[i - 1]) >= 0)
				dp[i][j] = Math.min(dp[i][j], 
									dp[i - 1][0] + curCost);
			if (curStr.compareTo(revStr[i - 1]) >= 0)
				dp[i][j] = Math.min(dp[i][j],
									dp[i - 1][1] + curCost);
		}
	}

	// getting minimum from both entries of last index
	int res = Math.min(dp[N - 1][0], dp[N - 1][1]);

	return (res == Integer.MAX_VALUE)? -1 : res;
}

static String reverse(String s, int start, int end)
{

	// Temporary variable to store character 
	char temp;
	char []str = s.toCharArray();
	while (start <= end) 
	{
		
		// Swapping the first and last character 
		temp = str[start];
		str[start] = str[end];
		str[end] = temp;
		start++;
		end--;
	}
	return String.valueOf(str);
} 

// Driver Code
public static void main(String[] args)
{
	String arr[] = {"aa", "ba", "ac"};
	int cost[] = {1, 3, 1};
	int N = arr.length;

	int res = minCost(arr, cost, N);
	if (res == -1)
		System.out.println("Sorting not possible\n");
	else
		System.out.println("Minimum cost to " + 
						"sort strings is " + res);
	}
}
