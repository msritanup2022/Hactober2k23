// Java code to find the maximum path length 
// considering any node as root 
import java.io.*; 
import java.util.*; 

class Soln{ 

static final int MAX_NODES = 100; 
static int in[] = new int[MAX_NODES]; 
static int out[] = new int[MAX_NODES]; 

static void dfs1(ArrayList<ArrayList<Integer>> v, 
				int u, int parent) 
{ 
	
	// Initially every node has 0 height 
	in[u] = 0; 

	// Traverse in the subtree of u 
	for(int j = 0; j < v.get(u).size(); j++) 
	{ 
		int child = v.get(u).get(j); 
		
		// If child is same as parent 
		if (child == parent) 
			continue; 

		// dfs called 
		dfs1(v, child, u); 

		// Recursively calculate the max height 
		in[u] = Math.max(in[u], 1 + in[child]); 
	} 
} 


static void dfs2(ArrayList<ArrayList<Integer>> v, 
				int u, int parent) 
{ 
	
	// Stores the longest and second 
	// longest branches 
	int mx1 = -1, mx2 = -1; 

	// Traverse in the subtrees of u 
	for(int j = 0; j < v.get(u).size(); j++) 
	{ 
		int child = v.get(u).get(j); 
		if (child == parent) 
			continue; 

		// Compare and store the longest 
		// and second longest 
		if (in[child] >= mx1) 
		{ 
			mx2 = mx1; 
			mx1 = in[child]; 
		} 

		else if (in[child] > mx2) 
			mx2 = in[child]; 
	} 

	// Traverse in the subtree of u 
	for(int j = 0; j < v.get(u).size(); j++) 
	{ 
		int child = v.get(u).get(j); 
		if (child == parent) 
			continue; 

		int longest = mx1; 

		// If longest branch has the node, then 
		// consider the second longest branch 
		if (mx1 == in[child]) 
			longest = mx2; 

		// Recursively calculate out[i] 
		out[child] = 1 + Math.max(out[u], 1 + longest); 

		// dfs function call 
		dfs2(v, child, u); 
	} 
} 

static void addEdge(ArrayList<ArrayList<Integer>> adj, 
					int u, int v) 
{ 
	adj.get(u).add(v); 
	adj.get(v).add(u); 
} 

// Function to print all the maximum heights 
// from every node 
static void printHeights(ArrayList<ArrayList<Integer>> v, 
						int n) 
{ 
	
	// Traversal to calculate in[] array 
	dfs1(v, 1, 0); 

	// Traversal to calculate out[] array 
	dfs2(v, 1, 0); 

	// Print all maximum heights 
	for(int i = 1; i < n; i++) 
		System.out.println( 
			"The maximum height when node " + i + 
			" is considered as root is " + 
			Math.max(in[i], out[i])); 
} 

// Driver Code 
public static void main(String[] args) 
{ 
	
	// Creating a graph with 11 vertices 
	int V = 12; 
	ArrayList<ArrayList< 
			Integer>> adj = new ArrayList<ArrayList< 
							Integer>>(V + 1); 
	for(int i = 0; i < V; i++) 
		adj.add(new ArrayList<Integer>()); 

	// Initialize the tree given in the diagram 
	addEdge(adj, 1, 2); 
	addEdge(adj, 1, 3); 
	addEdge(adj, 1, 4); 
	addEdge(adj, 2, 5); 
	addEdge(adj, 2, 6); 
	addEdge(adj, 3, 7); 
	addEdge(adj, 7, 10); 
	addEdge(adj, 7, 11); 
	addEdge(adj, 4, 8); 
	addEdge(adj, 4, 9); 

	// Function to print the maximum height 
	// from every node 
	printHeights(adj, V); 
} 
} 
